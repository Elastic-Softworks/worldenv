WORLDENV HITL TEST 1 - COMPREHENSIVE ACTION PLAN & AUDIT
=========================================================

DATE: 2025-01-21
STATUS: DIAGNOSIS COMPLETE - READY FOR IMPLEMENTATION

EXECUTIVE SUMMARY
=================
Root cause identified: Changes were made to source files in previous session but the
application was NEVER BUILT. The editor is running from old/non-existent build artifacts.
Additionally, several critical fixes from test1-todo.txt were NOT actually implemented
in the source code.

CRITICAL FINDINGS
=================

1. BUILD SYSTEM ISSUE (PRIMARY BLOCKER)
   - No dist/ directory exists
   - Application cannot run without build artifacts
   - User attempted to run editor without building first
   - This explains why NO changes are visible

2. INCOMPLETE SOURCE CODE CHANGES
   - EditorApp.tsx: NOT updated (still conditionally renders)
   - ViewportPanel.tsx: NOT verified if welcome overlay exists
   - Menu handlers: NOT verified if logging was added
   - Window controls: NOT verified if handlers exist

3. WHAT WAS ACTUALLY COMPLETED
   - ✅ splash.ts: Successfully updated with new branding and animations
   - ✅ splash.ts: Duration already at 3000ms (3 seconds)
   - ❓ Other changes: Need verification

IMMEDIATE ACTION PLAN
======================

PHASE 1: SOURCE CODE AUDIT & FIXES (DO THIS FIRST)
---------------------------------------------------

Step 1.1: Audit and Fix EditorApp.tsx
   Current State: Conditionally renders WelcomeScreen OR EditorShell
   Required State: Always render EditorShell, with ViewportPanel handling no-project state
   File: worldenv/editor/src/renderer/components/EditorApp.tsx
   Action: Modify to always return <EditorShell />

Step 1.2: Audit and Fix ViewportPanel.tsx
   Required State: Must show welcome overlay when no project is open
   File: worldenv/editor/src/renderer/components/panels/ViewportPanel.tsx
   Action: Verify/implement welcome overlay with project creation actions

Step 1.3: Audit and Fix Menu Handlers
   Required State: All menu items must log actions to console
   Files to check:
   - worldenv/editor/src/main/main.ts (IPC handlers)
   - worldenv/editor/src/renderer/components/MenuBar.tsx (menu actions)
   Action: Add console.log statements for all menu operations

Step 1.4: Audit HierarchyPanel, InspectorPanel, AssetBrowserPanel
   Required State: All panels must render with empty states when no project
   Files:
   - worldenv/editor/src/renderer/components/panels/HierarchyPanel.tsx
   - worldenv/editor/src/renderer/components/panels/InspectorPanel.tsx
   - worldenv/editor/src/renderer/components/panels/AssetBrowserPanel.tsx
   Action: Verify empty state handling exists

Step 1.5: Audit ViewportRenderer3D
   Required State: WebGL fallback and error handling
   File: worldenv/editor/src/renderer/viewport/ViewportRenderer3D.ts
   Action: Verify/implement WebGL fallback to canvas

PHASE 2: BUILD THE APPLICATION (AFTER PHASE 1)
-----------------------------------------------

Step 2.1: Install Dependencies
   Command: cd worldenv/editor && npm install
   Purpose: Ensure all dependencies are present

Step 2.2: Build Main Process
   Command: cd worldenv/editor && npm run build:main
   Purpose: Compile main process TypeScript to dist/main/

Step 2.3: Build Renderer Process
   Command: cd worldenv/editor && npm run build:renderer
   Purpose: Compile renderer process TypeScript to dist/renderer/

Step 2.4: Verify Build Output
   Check: worldenv/editor/dist/main/main.js exists
   Check: worldenv/editor/dist/renderer/ contains bundled assets

PHASE 3: TESTING & VERIFICATION (AFTER PHASE 2)
------------------------------------------------

Step 3.1: Launch Editor
   Command: cd worldenv/editor && npm start
   Expected: Application launches with splash screen

Step 3.2: Verify Splash Screen
   Expected Behaviors:
   - Shows "ELASTIC SOFTWORKS 2025" text
   - Shows "NEW WORLD APPLICATIONS" under WORLDENV
   - Rainbow gradient animation on company text
   - Logo glow/pulse animation
   - Displays for 3 seconds (not 1 second)
   - Background watermarks visible

Step 3.3: Verify UI Panels Visible
   Expected Behaviors:
   - Hierarchy panel visible on left
   - Viewport panel visible in center with welcome overlay
   - Inspector panel visible on right
   - Asset browser visible at bottom
   - All panels show appropriate empty states

Step 3.4: Verify Menu Functionality
   Test Each Menu:
   - File > New Project (should log to console)
   - File > Open Project (should show dialog and log)
   - File > Save Project (should log)
   - Edit > Undo/Redo (should log)
   - View > Panels (should log toggle actions)
   - Build > Build Project (should log build start)
   - Help > Documentation (should log)

Step 3.5: Verify Window Controls
   Test:
   - Minimize button (should minimize, not freeze)
   - Maximize button (should toggle maximize)
   - Close button (should close gracefully)

Step 3.6: Verify Theme Switching
   Test:
   - Switch between light and dark mode
   - Verify all panels update
   - Verify splash screen respects theme (future enhancement)

PHASE 4: HITL TESTING INTERFACE IMPROVEMENTS
---------------------------------------------

Step 4.1: Review hitl/index.html
   Issues Noted:
   - Screenshot base64 data causing "image links way off in base64 spam"
   - Need better screenshot handling in JSON export

Step 4.2: Improve Screenshot Handling
   Proposed Solution:
   - Store screenshots as separate files
   - Reference by filename in JSON
   - Or: Compress base64 data
   - Or: Use image hash instead of full data

Step 4.3: Update HITL Documentation
   Files to update:
   - hitl/README.txt (ensure process is clear)
   - editor/docs/TESTING-GUIDE.md (align with reality)

PHASE 5: DOCUMENTATION & TRACKING
----------------------------------

Step 5.1: Update test1-todo.txt
   Mark items as:
   - [VERIFIED] if confirmed in source code
   - [COMPLETED] if tested and working
   - [PENDING] if needs build/test
   - [BLOCKED] if waiting on something

Step 5.2: Create Build Instructions Document
   New File: editor/docs/BUILD.md
   Content:
   - Prerequisites (Node.js version, npm, etc.)
   - Build commands (dev vs production)
   - Common issues and solutions
   - How to verify build success

Step 5.3: Update Testing Checklist
   Ensure consistency between:
   - hitl/index.html checklist
   - editor/docs/TESTING-GUIDE.md
   - hitl/docs/test1-todo.txt

DETAILED IMPLEMENTATION CHECKLIST
==================================

BLOCKER FIXES (Must complete before build)
-------------------------------------------

[ ] 1. EditorApp.tsx - Always Render EditorShell
    Location: worldenv/editor/src/renderer/components/EditorApp.tsx
    Change: Remove conditional rendering, always return <EditorShell />

[ ] 2. ViewportPanel.tsx - Welcome Overlay
    Location: worldenv/editor/src/renderer/components/panels/ViewportPanel.tsx
    Add: Welcome overlay with "No Project Open" message and "Create Project" button

[ ] 3. Main Process Menu Logging
    Location: worldenv/editor/src/main/main.ts
    Add: console.log() for all IPC menu handlers

[ ] 4. Renderer Menu Logging
    Location: worldenv/editor/src/renderer/components/MenuBar.tsx
    Add: console.log() for all menu click handlers

[ ] 5. WebGL Fallback System
    Location: worldenv/editor/src/renderer/viewport/ViewportRenderer3D.ts
    Add: WebGL support detection, fallback to canvas, error handling

CRITICAL FIXES (Should complete before build)
----------------------------------------------

[ ] 6. HierarchyPanel Empty State
    Location: worldenv/editor/src/renderer/components/panels/HierarchyPanel.tsx
    Verify: Shows "No project open" or similar when state.project is null

[ ] 7. InspectorPanel Empty State
    Location: worldenv/editor/src/renderer/components/panels/InspectorPanel.tsx
    Verify: Shows "No selection" or similar when no entity selected

[ ] 8. AssetBrowserPanel Empty State
    Location: worldenv/editor/src/renderer/components/panels/AssetBrowserPanel.tsx
    Verify: Shows "No project open" when state.project is null

[ ] 9. Window Controls IPC Handlers
    Location: worldenv/editor/src/main/main.ts
    Verify: Window minimize/maximize/close handlers exist and work

HIGH PRIORITY ENHANCEMENTS
---------------------------

[ ] 10. Splash Screen Theme Support
     Add: Light/dark mode variants for splash screen

[ ] 11. Project Creation Workflow
     Verify: "New Project" actually creates a project structure

[ ] 12. Theme Persistence
     Verify: Theme choice saved between sessions

BUILD CHECKLIST
===============

[ ] 1. Run npm install in worldenv/editor
[ ] 2. Run npm run build:main
[ ] 3. Run npm run build:renderer
[ ] 4. Verify dist/main/main.js exists
[ ] 5. Verify dist/renderer/ contains index.html
[ ] 6. Run npm start to launch

TESTING CHECKLIST (HITL Round 2)
=================================

Application Foundation
----------------------
[ ] Test 1: Application launches successfully
[ ] Test 2: Splash screen displays with new branding
[ ] Test 3: Main window opens with all panels visible
[ ] Test 4: Application closes gracefully
[ ] Test 5: No memory leaks during startup/shutdown

Window Management
-----------------
[ ] Test 6: Window resizing works correctly
[ ] Test 7: Minimize/maximize functionality works
[ ] Test 8: Multi-monitor support (if available)
[ ] Test 9: Window state persistence
[ ] Test 10: High-DPI scaling

Menu System
-----------
[ ] Test 11: All menu items produce console output
[ ] Test 12: Keyboard shortcuts work
[ ] Test 13: Context menus appear
[ ] Test 14: Menu state updates appropriately
[ ] Test 15: Platform-specific behavior

UI Framework & Layout
----------------------
[ ] Test 31: All panels visible and functional
[ ] Test 32: Panel resizing and docking works
[ ] Test 33: Panel state persistence
[ ] Test 34: Panel overflow handling
[ ] Test 35: Responsive layout

Theme System
------------
[ ] Test 36: Dark/light theme switching
[ ] Test 37: Theme persistence
[ ] Test 38: Consistent styling
[ ] Test 39: High contrast support

KNOWN ISSUES TO INVESTIGATE
============================

1. Minimize Button Freezes App
   Symptom: Clicking minimize freezes app mid-animation
   Possible Causes:
   - IPC handler blocking main thread
   - Missing event.preventDefault()
   - Window state not updating

2. Opening Project Does Nothing
   Symptom: File > Open Project saves something but UI doesn't change
   Possible Causes:
   - Project loading logic not updating UI state
   - EditorShell not responding to project state changes
   - Missing state.project update after load

3. View/Build/Help Buttons Don't Work
   Symptom: Menu items don't produce any action
   Possible Causes:
   - Missing IPC handlers in main process
   - IPC channel names don't match
   - Handlers exist but don't execute anything

4. Gray Screen Only (No UI)
   Status: ROOT CAUSE IDENTIFIED
   Cause: Application not built, running from non-existent dist/
   Solution: Complete Phase 1 & 2 above

DEVELOPMENT WORKFLOW IMPROVEMENTS
==================================

Recommended Process:
1. Always run npm install after pulling changes
2. Always run npm run build before npm start
3. For development, use npm run dev (watches for changes)
4. Check dist/ directory exists before assuming build succeeded
5. Clear browser cache if renderer changes don't appear

HITL SYSTEM IMPROVEMENTS
=========================

Screenshot Handling Options:
A. Store screenshots in hitl/screenshots/ directory
   - Modify index.html to save files locally
   - Reference by filename in JSON

B. Compress base64 data
   - Reduce image quality for JSON inclusion
   - Add option to export full quality separately

C. Make screenshots optional
   - Allow generating report without screenshots
   - Add "Export Screenshots" separate button

JSON Export Improvements:
- Add timestamp to report
- Add system information (OS, Node version, etc.)
- Add git commit hash if available
- Pretty-print JSON for readability

NEXT STEPS SUMMARY
==================

1. READ AND UNDERSTAND THIS DOCUMENT
2. Execute Phase 1 (audit and fix source code)
3. Execute Phase 2 (build the application)
4. Execute Phase 3 (test and verify fixes)
5. Execute Phase 4 (improve HITL system)
6. Update test1-todo.txt with actual status
7. Begin HITL Round 2 testing with checklist above

CRITICAL REMINDERS
==================

⚠️  NEVER assume changes are live without building
⚠️  ALWAYS verify source code changes exist before marking complete
⚠️  ALWAYS build after making source code changes
⚠️  ALWAYS test after building
⚠️  Document what you actually see, not what you expect to see

SUCCESS CRITERIA FOR PHASE COMPLETION
======================================

Phase 1 Complete When:
- All source files verified/modified
- No compilation errors
- All changes committed

Phase 2 Complete When:
- dist/ directory exists
- dist/main/main.js exists
- dist/renderer/index.html exists
- No build errors in console

Phase 3 Complete When:
- Application launches without errors
- Splash screen shows new branding
- All UI panels visible on startup
- Menu actions log to console
- Window controls work correctly

Phase 4 Complete When:
- HITL system exports clean JSON
- Screenshots handled appropriately
- Documentation updated

ESTIMATED TIME
==============

Phase 1: 2-3 hours (careful auditing and fixing)
Phase 2: 15-30 minutes (build time)
Phase 3: 1-2 hours (thorough testing)
Phase 4: 1-2 hours (improvements)
Total: 5-8 hours of focused work

PRIORITY ORDER
==============

1. Phase 1 Step 1.1 (EditorApp.tsx) - CRITICAL
2. Phase 1 Step 1.2 (ViewportPanel.tsx) - CRITICAL
3. Phase 1 Step 1.3 (Menu logging) - CRITICAL
4. Phase 2 (Build) - CRITICAL
5. Phase 3 Steps 3.1-3.3 (Launch and verify) - CRITICAL
6. Everything else - HIGH/MEDIUM

GO/NO-GO DECISION POINT
========================

Before starting HITL Round 2:
✓ All Phase 1 steps completed
✓ All Phase 2 steps completed
✓ Phase 3 Steps 3.1-3.3 passed
✓ test1-todo.txt updated with actual status

If any ✓ is missing, DO NOT proceed to HITL Round 2.

END OF ACTION PLAN
==================
